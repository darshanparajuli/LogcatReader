plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-parcelize'
  alias(libs.plugins.compose.compiler)
  alias(libs.plugins.ksp)
}

def fileProvider = "file_provider"

android {
  defaultConfig {
    applicationId "com.dp.logcatapp"
    compileSdk 36
    targetSdkVersion 36
    minSdkVersion 21
    versionCode 38
    versionName "2.1.1"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true
    multiDexEnabled true
  }

  buildFeatures {
    compose true
    buildConfig true
  }

  signingConfigs {
    release {
      try {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
        keyAlias keystoreProperties['keyAlias']
        keyPassword keystoreProperties['keyPassword']
        storeFile file(keystoreProperties['storeFile'])
        storePassword keystoreProperties['storePassword']
      } catch (FileNotFoundException ignored) {
        println("keystore file not found.")
      }
    }
  }

  lintOptions {
    abortOnError false
    disable 'MissingTranslation'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17
  }

  buildTypes {
    buildTypes.each {
      it.buildConfigField("String", "FILE_PROVIDER", "\"$fileProvider\"")
      it.addManifestPlaceholders(["fileProvider": fileProvider])
    }
    release {
      signingConfig signingConfigs.release
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  namespace 'com.dp.logcatapp'
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation project(':collections')
  implementation project(':logcat')
  implementation project(':logger')
  implementation libs.core.ktx
  implementation libs.appcompat
  implementation libs.material
  implementation libs.preference.ktx
  implementation libs.lifecycle.service
  implementation libs.kotlinx.coroutines.core
  implementation libs.constraintlayout
  implementation libs.room.runtime
  implementation libs.room.ktx
  implementation libs.documentfile
  implementation libs.kotlinx.coroutines.android
  implementation libs.multidex
  ksp libs.room.compiler
  implementation(libs.coil.compose)
  implementation libs.core.splashscreen

  // Compose
  def composeBom = platform(libs.compose.bom)
  implementation composeBom
  androidTestImplementation composeBom
  // Material Design 3
  implementation libs.material3

  // Android Studio Preview support
  implementation libs.ui.tooling.preview
  debugImplementation libs.ui.tooling

  // UI Tests
  androidTestImplementation libs.ui.test.junit4
  debugImplementation libs.ui.test.manifest

  // Optional - Included automatically by material, only add when you need
  // the icons but not the material library (e.g. when using Material3 or a
  // custom design system based on Foundation)
  implementation libs.material.icons.core
  // Optional - Add full set of material icons
  implementation libs.material.icons.extended
  // Optional - Add window size utils
  implementation libs.adaptive

  // Optional - Integration with activities
  implementation libs.activity.compose
  // Optional - Integration with ViewModels
  implementation libs.lifecycle.viewmodel.compose

  testImplementation libs.junit
  androidTestImplementation libs.runner
  androidTestImplementation libs.espresso.core
}
